<?php

/**
 * @file
 * Endpoint tests for BlogAPI Metaweblog
 */
class BlogapiMetaweblogEndpointTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';
  protected $blogID;
  protected $privilegedUser;
  protected $testfile;
  protected $privilegedUser2;
  protected $xmlrpcUrl;

  /**
   * Test info.
   */
  public static function getInfo() {
    return array(
      'name' => t('Metaweblog Endpoint Tests'),
      'description' => t('Run tests for Metaweblog endpoints') ,
      'group' => t('BlogAPI'),
    );
  }

  /**
   * Set up test.
   */
  public function setUp() {
    parent::setUp(array(
      'blogapi',
      'blogapi_metaweblog',
      'filter',
      'services',
      'taxonomy',
      'xmlrpc_server',
    ));

    // Get the URL of the XML-RPC endpoint.
    $this->xmlrpcUrl = url('blogapi/xmlrpc', array('absolute' => TRUE));

    // Create a user with appropriate permissions.
    $this->unPrivilegedUser = $this->drupalCreateUser(array('access content'));
    $this->unPrivilegedUser->mail = 'test1@example.com';
    $this->unPrivilegedUser->name = 'Test user 1';
    user_save($this->unPrivilegedUser);

    // Create a user with appropriate permissions.
    $this->privilegedUser = $this->drupalCreateUser(array('manage content with blogapi'));
    $this->privilegedUser->mail = 'test2@example.com';
    $this->privilegedUser->name = 'Test user 2';
    user_save($this->privilegedUser);

    // Create another user with more permissions.
    $this->privilegedUser2 = $this->drupalCreateUser(array('manage content with blogapi', 'bypass node access', 'administer nodes', 'administer taxonomy'));
    $this->privilegedUser2->mail = 'test3@example.com';
    $this->privilegedUser2->name = 'Test user 3';
    user_save($this->privilegedUser2);
  }

  /**
   * Test metaWeblog.newPost().
   */
  public function testNewPost() {
    // Prepare data for nodes
    $node_title = user_password(10);
    $node_body = user_password(20);
    $content = array('title' => $node_title, 'description' => $node_body);
    $missed_type = '_arcticle';

    // Test authantication with random username/password
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newPost' => array(
        '1234567890',
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Test authantication with random username/password
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newPost' => array(
        $missed_type,
        user_password(10),
        user_password(10),
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newPost' => array(
        $missed_type,
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw,
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    // Try to create the node. This should fail because the user does not have
    // permission to create this content type.
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newPost' => array(
        $missed_type,
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw,
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), 'You do not have permission to create this type of post.',
      t('Node access is being respected.'));


    // Try to create the node. This should fail because the user does not have
    // permission to create this content type.
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newPost' => array(
        $missed_type,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('BlogAPI is not configured to support the @type content type.', array('@type' => $missed_type)),
      $missed_type . ' type is missed.');

    // Create a content type.
    $type = $this->drupalCreateContentType();
    // Test with existing content type but not allowed for BlogAPI
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newPost' => array(
        $type->type,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('BlogAPI is not configured to support the @type content type.', array('@type' => $type->type)),
      $type->type . ' is not allowed for BlogAPI yet.');

    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($type->type));
    // Create the node. This should work because the user has administer nodes.
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newPost' => array(
        $type->type,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        $content,
        TRUE,
      ),
    ));

    // Load the node and validate the data.
    $node = node_load($nid[0]);
    $this->assertEqual($node->title, $node_title, t('New node title is set correctly.'));
    $this->assertEqual($node->body[LANGUAGE_NONE][0]['value'], $node_body, t('New node body is set correctly.'));
    $this->assertEqual($node->status, 1, t('New node is published'));
  }

  /**
   * Test metaWeblog.editPost().
   */
  public function testEditPost() {
    // Test authantication with random username/password
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.editPost' => array(
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Prepare data for nodes
    $node_title = user_password(10);
    $node_body = user_password(20);
    $content = array('title' => $node_title, 'description' => $node_body);
    $allowed_type = $this->drupalCreateContentType();
    $disallowed_type = $this->drupalCreateContentType();

    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($allowed_type->type));

    $wrong_node = $this->drupalCreateNode(array('type' => $disallowed_type->type));
    $correct_node = $this->drupalCreateNode(array('type' => $allowed_type->type, 'title' => $node_title, 'body' => array(LANGUAGE_NONE => array(array('value' => $node_body)))));

    // Test authantication with random username/password
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.editPost' => array(
        $correct_node->nid,
        user_password(10),
        user_password(10),
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));


    // Test user without blogAPI permission.
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.editPost' => array(
        $correct_node->nid,
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw,
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    // Test edit unexisting node
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.editPost' => array(
        0,
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw,
        $content,
        TRUE,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Node @nid not found', array('@nid' => 0)), t('Not found error returned'));// Test edit unexisting node

    // Try to update node with unprevileged user
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.editPost' => array(
        $correct_node->nid,
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw,
        $content,
        TRUE,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to update this post.'), t('User must have node edit permissions'));

    $node_title .= ' modified title';
    $node_body .= ' modified body';

    $result = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.editPost' => array(
        $correct_node->nid,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        array('title' => $node_title, 'description' => $node_body),
        TRUE
      )
    ));

    $new_node = node_load($correct_node->nid, NULL, TRUE);
    $this->assertTrue($result && $new_node->title != $correct_node->title, 'Node was updated');

    $this->assertTrue($new_node->title == $node_title, 'Title was updated');

    $this->assertTrue(!empty($new_node->body[LANGUAGE_NONE][0]['value']) && $new_node->body[LANGUAGE_NONE][0]['value'] == $node_body, 'Body was updated');
  }

  /**
   * Test metaWeblog.getPost().
   */
  public function testGetPost() {
    $type = $this->drupalCreateContentType();

    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($type->type));

    $node = $this->drupalCreateNode(array('type' => $type->type, 'uid' => $this->privilegedUser2->uid));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.getPost' => array(
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.getPost' => array(
        $node->nid,
        user_password(10),
        user_password(10),
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.getPost' => array(
        $node->nid,
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    // Test user without node view permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.getPost' => array(
        $node->nid,
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You are not authorized to view post @postid', array('@postid' => $node->nid)), t('User must node view permissions'));

    // Normal test
    $result = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.getPost' => array(
        $node->nid,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
      ),
    ));

    $this->assertTrue($result['userid'] == $this->privilegedUser2->name, 'Author name is correct');
    $this->assertTrue($result['dateCreated'] == xmlrpc_date($node->created), 'Created date is correct');
    $this->assertTrue($result['title'] == $node->title, 'Post title is correct');
    $this->assertTrue($result['postid'] == $node->nid, 'Post ID is correct');
    $node_body = !empty($node->body[LANGUAGE_NONE][0]['value']) ? $node->body[LANGUAGE_NONE][0]['value'] : '';
    $this->assertTrue($result['content'] == '<title>' . $node->title . '</title>' . $node_body, 'Post content is correct');
    $this->assertTrue($result['link'] == url('node/' . $node->nid, array('absolute' => TRUE)), 'Post link is correct');
  }

  /**
   * Test metaWeblog.newMediaObject().
   * @TODO finish this test
   */
  public function testNewMediaObject() {
    $type = $this->drupalCreateContentType();

    $this->testfiles = $this->drupalGetTestFiles('image');
    $this->testfile = current($this->testfiles);
    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($type->type));

    $node = $this->drupalCreateNode(array('type' => $type->type, 'uid' => $this->privilegedUser2->uid));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newMediaObject' => array(
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newMediaObject' => array(
        $type->type,
        user_password(10),
        user_password(10),
        array(
          'name' => $this->testfile->filename,
          'type' => mime_content_type(file_create_url($this->testfile->uri)),
          'bits' => base64_encode(file_get_contents(file_create_url($this->testfile->uri))),
        ),
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newMediaObject' => array(
        $type->type,
        user_password(10),
        user_password(10),
        array(
          'name' => $this->testfile->filename,
          'type' => mime_content_type(file_create_url($this->testfile->uri)),
          'bits' => base64_encode(file_get_contents(file_create_url($this->testfile->uri))),
        ),
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    $result = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newMediaObject' => array(
        $this->blogID,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        array(
          'name' => $this->testfile->filename,
          'type' => mime_content_type(file_create_url($this->testfile->uri)),
          'bits' => base64_encode(file_get_contents(file_create_url($this->testfile->uri))),
        ),
      )
    ));

    $this->assertTrue(is_file($result['url']), 'New file saved to disk.', 'FileResource: Create');
  }

  /**
   * Test metaWeblog.getCategories().
   */
  public function testGetCategories() {
    $this->admin_user = $this->drupalCreateUser(array('administer taxonomy', 'bypass node access', 'administer services'));
    $this->drupalLogin($this->admin_user);
    $this->vocabulary = $this->createVocabulary();

    $field = array(
      'field_name' => 'taxonomy_' . $this->vocabulary->machine_name,
      'type' => 'taxonomy_term_reference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $this->vocabulary->machine_name,
            'parent' => 0,
          ),
        ),
      ),
    );

    field_create_field($field);

    $this->instance = array(
      'field_name' => 'taxonomy_' . $this->vocabulary->machine_name,
      'bundle' => 'article',
      'entity_type' => 'node',
      'widget' => array(
        'type' => 'options_select',
      ),
      'display' => array(
        'default' => array(
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
    );

    field_create_instance($this->instance);

    $terms = array();

    for ($i = 0; $i < 5; $i++) {
      $terms[] = $this->createTerm($this->vocabulary);
    }

    $testNode = array(
      'type' => 'article',
      $field['field_name'] => array(
        LANGUAGE_NONE => array(
          array(
            'tid' => $terms[0]->tid
          )
        )
      )
    );

    $node = $this->drupalCreateNode($testNode);

    $results = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.getCategories' => array(
        $this->blogID,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
      )
    ));

    $this->assertTrue(is_array($results) && count($results) == count($terms), 'Service returned correct terms number');

    $success = TRUE;

    foreach ($results as $category) {
      $term = taxonomy_term_load($category['categoryId']);
      if (empty($term) || $term->name != $category['categoryName']) {
        $success = FALSE;
      }
    }

    $this->assertTrue($success, 'All terms were retrieved properly');
  }

  /**
   * test metaWeblog.getRecentPosts().
   */
  public function testGetRecentPosts() {
    $default_title = 'Default title ';
    $default_body = 'Default body ';

    for ($i = 0; $i < 11; $i++) {
      $this->createPostViaxmlrpc($default_title . $i, $default_body . $i);
    }

    $posts_count = 9;

    $results = xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.getRecentPosts' => array(
        $this->blogID,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        $posts_count,
      )
    ));

    $this->assertTrue(is_array($results) && count($results) == $posts_count, 'Service returned correct posts number');
    $success = TRUE;

    foreach ($results as $post) {
      $node = node_load($post['postid']);

      if (empty($node) || $node->title != $post['title']
        || (!empty($node->body[LANGUAGE_NONE][0]['value']) && $node->body[LANGUAGE_NONE][0]['value'] != $post['description'])) {
        $success = FALSE;
      }
    }

    $this->assertTrue($success, 'All nodes were retrieved properly');
  }

  protected function createPostViaxmlrpc($title, $body, $status = 1) {
    return xmlrpc($this->xmlrpcUrl, array(
      'metaWeblog.newPost' => array(
        $this->blogID,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        array(
          'title' => $title,
          'description' => $body,
        ),
        $status
      )
    ));
  }

  /**
   * Returns a new vocabulary with random properties.
   */
  function createVocabulary() {
    // Create a vocabulary.
    $vocabulary = new stdClass();
    $vocabulary->name = $this->randomName();
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = drupal_strtolower($this->randomName());
    $vocabulary->help = '';
    $vocabulary->nodes = array('article' => 'article');
    $vocabulary->weight = mt_rand(0, 10);
    taxonomy_vocabulary_save($vocabulary);

    return $vocabulary;
  }

  /**
   * Returns a new term with random properties in vocabulary $vid.
   */
  function createTerm($vocabulary) {
    $term = new stdClass();
    $term->name = $this->randomName();
    $term->description = $this->randomName();
    // Use the first available text format.
    $term->format = db_query_range('SELECT format FROM {filter_format}', 0, 1)->fetchField();
    $term->vid = $vocabulary->vid;
    taxonomy_term_save($term);
    return $term;
  }
}
