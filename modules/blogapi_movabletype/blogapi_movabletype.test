<?php

/**
 * @file
 * Endpoint tests for BlogAPI MovableType
 */
class BlogapiMovabletypeEndpointTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';
  protected $blogID;
  protected $privilegedUser;
  protected $testfile;
  protected $privilegedUser2;
  protected $xmlrpcUrl;

  /**
   * Test info.
   */
  public static function getInfo() {
    return array(
      'name' => t('MovableType Endpoint Tests'),
      'description' => t('Run tests for MovableType endpoints') ,
      'group' => t('BlogAPI'),
    );
  }

  /**
   * Set up test.
   */
  public function setUp() {
    parent::setUp(array(
      'blogapi',
      'blogapi_movabletype',
      'filter',
      'services',
      'taxonomy',
      'xmlrpc_server',
    ));

    // Get the URL of the XML-RPC endpoint.
    $this->xmlrpcUrl = url('blogapi/xmlrpc', array('absolute' => TRUE));

    // Create a user with appropriate permissions.
    $this->unPrivilegedUser = $this->drupalCreateUser(array('access content'));
    $this->unPrivilegedUser->mail = 'test1@example.com';
    $this->unPrivilegedUser->name = 'Test user 1';
    user_save($this->unPrivilegedUser);

    // Create a user with appropriate permissions.
    $this->privilegedUser = $this->drupalCreateUser(array('manage content with blogapi'));
    $this->privilegedUser->mail = 'test2@example.com';
    $this->privilegedUser->name = 'Test user 2';
    user_save($this->privilegedUser);

    // Create another user with more permissions.
    $this->privilegedUser2 = $this->drupalCreateUser(array('manage content with blogapi', 'bypass node access', 'administer nodes', 'administer taxonomy'));
    $this->privilegedUser2->mail = 'test3@example.com';
    $this->privilegedUser2->name = 'Test user 3';
    user_save($this->privilegedUser2);
  }

  /**
   * Test mt.publishPost().
   */
  public function testPublishPost() {
    $type = $this->drupalCreateContentType();

    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($type->type));

    $node = $this->drupalCreateNode(array('status' => 0, 'type' => $type->type, 'uid' => $this->privilegedUser2->uid));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'mt.publishPost' => array(
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'mt.publishPost' => array(
        $node->nid,
        user_password(10),
        user_password(10),
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'mt.publishPost' => array(
        $node->nid,
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    // Test user without node view permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'mt.publishPost' => array(
        $node->nid,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
      ),
    ));

    $updated_node = node_load($node->nid, NULL, TRUE);

    $this->assertTrue($result && !$updated_node->status, 'Node was unpublished');
  }

  /**
   * Test mt.getRecentPostTitles().
   */
  public function testGetRecentPostTitles() {
    $type = $this->drupalCreateContentType();
    $number_of_posts = 9;
    $nodes = array();

    for ($i = 0; $i < 11; $i++) {
      $node = $this->drupalCreateNode(array('type' => $type->type, 'uid' => $this->privilegedUser2->uid));
      $nodes[$node->nid] = $node;
    }

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'mt.getRecentPostTitles' => array(
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'mt.getRecentPostTitles' => array(
        $type->type,
        user_password(10),
        user_password(10),
        $number_of_posts,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'mt.getRecentPostTitles' => array(
        $type->type,
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw,
        $number_of_posts,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    // Test user without node view permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'mt.getRecentPostTitles' => array(
        $type->type,
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw,
        $number_of_posts,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('BlogAPI is not configured to support the @type content type.', array('@type' => $type->type)),
      $type->type . ' is not allowed for BlogAPI yet.');

    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($type->type));

    $results = xmlrpc($this->xmlrpcUrl, array(
      'mt.getRecentPostTitles' => array(
        $type->type,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        $number_of_posts,
      )
    ));

    $this->assertTrue(is_array($results) && count($results) == $number_of_posts, 'Service returned correct posts number');
    $success = TRUE;

    foreach ($results as $post) {
      $node = node_load($post['postid']);

      if (empty($node) || $node->title != $nodes[$post['postid']]->title) {
        $success = FALSE;
      }
    }

    $this->assertTrue($success, 'All nodes were retrieved properly');
  }

  /**
   * Test mt.getCategoryList().
   */
  public function testGetCategoryList() {
    $this->admin_user = $this->drupalCreateUser(array('administer content types', 'administer taxonomy', 'bypass node access', 'administer services'));
    $this->drupalLogin($this->admin_user);
    $this->vocabulary = $this->createVocabulary();
    $type = $this->drupalCreateContentType();

    $field = array(
      'field_name' => 'taxonomy_' . $this->vocabulary->machine_name,
      'type' => 'taxonomy_term_reference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $this->vocabulary->machine_name,
            'parent' => 0,
          ),
        ),
      ),
    );

    field_create_field($field);

    $this->instance = array(
      'field_name' => 'taxonomy_' . $this->vocabulary->machine_name,
      'bundle' => $type->type,
      'entity_type' => 'node',
      'widget' => array(
        'type' => 'options_select',
      ),
      'display' => array(
        'default' => array(
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
    );

    field_create_instance($this->instance);

    $terms = array();

    for ($i = 0; $i < 5; $i++) {
      $terms[] = $this->createTerm($this->vocabulary);
    }

    $testNode = array(
      'type' => $type->type,
      $field['field_name'] => array(
        LANGUAGE_NONE => array(
          array(
            'tid' => $terms[0]->tid
          )
        )
      ),
      'uid' => $this->privilegedUser2->uid,
    );

    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($type->type));

    $node = $this->drupalCreateNode($testNode);

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'mt.getCategoryList' => array(
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'mt.getCategoryList' => array(
        $type->type,
        user_password(10),
        user_password(10),

      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'mt.getCategoryList' => array(
        $type->type,
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw,
      )
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    $results = xmlrpc($this->xmlrpcUrl, array(
      'mt.getCategoryList' => array(
        $type->type,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
      )
    ));
    
    $this->assertTrue(is_array($results) && count($results) == count($terms), 'Service returned correct terms number');

    $success = TRUE;

    foreach ($results as $category) {
      $term = taxonomy_term_load($category['categoryId']);
      if (empty($term) || $term->name != $category['categoryName']) {
        $success = FALSE;
      }
    }

    $this->assertTrue($success, 'All terms were retrieved properly');
  }

  /**
   * Test mt.getPostCategories().
   */
  public function testGetPostCategories() {

  }

  /**
   * Test mt.setPostCategories().
   */
  public function testSetPostCategories() {

  }

  /**
   * Test mt.supportedMethods().
   */
  public function testSupportedMethods() {

  }

  /**
   * Test mt.supportedTextFilters().
   */
  public function testSupportedTextFilters() {

  }

  /**
   * Returns a new vocabulary with random properties.
   * @TODO put in parent blogapi.test
   */
  function createVocabulary() {
    // Create a vocabulary.
    $vocabulary = new stdClass();
    $vocabulary->name = $this->randomName();
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = drupal_strtolower($this->randomName());
    $vocabulary->help = '';
    $vocabulary->nodes = array('article' => 'article');
    $vocabulary->weight = mt_rand(0, 10);
    taxonomy_vocabulary_save($vocabulary);

    return $vocabulary;
  }

  /**
   * Returns a new term with random properties in vocabulary $vid.
   * @TODO put in parent blogapi.test
   */
  function createTerm($vocabulary) {
    $term = new stdClass();
    $term->name = $this->randomName();
    $term->description = $this->randomName();
    // Use the first available text format.
    $term->format = db_query_range('SELECT format FROM {filter_format}', 0, 1)->fetchField();
    $term->vid = $vocabulary->vid;
    taxonomy_term_save($term);
    return $term;
  }
}
