<?php

/**
 * @file
 * Provides Blogger services for BlogAPI
 */

/**
 * Implements hook_blogapi_info().
 */
function blogapi_blogger_blogapi_info() {
  return array(
    'api_version' => 2,
    'type' => 'xmlrpc',
    'name' => 'Blogger',
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function blogapi_blogger_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "services" && $api == "services") {
    return array("version" => "3");
  }
}

/**
 * Implements hook_services_resources().
 */
function blogapi_blogger_services_resources() {
  return array(
    'blogger' => array(
      'actions' => array(
        'getUsersBlogs' => array(
          'access callback' => TRUE,
          'callback' => 'blogapi_blogger_get_users_blogs',
          'enabled' => 1,
          'help' => 'Returns a list of blogs to which an author has posting privileges.',
          'args' => array(
            array(
              'appid' => 'string',
              'username' => 'string',
              'password' => 'string',
            ),
          ),
        ),
        'getUserInfo' => array(
          'access callback' => TRUE,
          'callback' => 'blogapi_blogger_get_user_info',
          'enabled' => 1,
          'help' => 'Returns information about an author in the system.',
          'args' => array(
            array(
              'appid' => 'string',
              'username' => 'string',
              'password' => 'string',
            ),
          ),
        ),
        'newPost' => array(
          'access callback' => TRUE,
          'callback' => 'blogapi_blogger_new_post',
          'enabled' => 1,
          'help' => 'Creates a new post, and optionally publishes it.',
          'args' => array(
            array(
              'appid' => 'string',
              'blogid' => 'string',
              'username' => 'string',
              'password' => 'string',
              'content' => 'string',
              'publish' => 'boolean',
            ),
          ),
        ),
        'editPost' => array(
          'access callback' => TRUE,
          'callback' => 'blogapi_blogger_edit_post',
          'enabled' => 1,
          'help' => 'Updates the information about an existing post.',
          'args' => array(
            array(
              'appid' => 'string',
              'postid' => 'string',
              'username' => 'string',
              'password' => 'string',
              'content' => 'string',
              'publish' => 'boolean',
            ),
          ),
        ),
        'getPost' => array(
          'access callback' => TRUE,
          'callback' => 'blogapi_blogger_get_post',
          'enabled' => 1,
          'help' => 'Returns information about a specific post.',
          'args' => array(
            array(
              'appid' => 'string',
              'postid' => 'string',
              'username' => 'string',
              'password' => 'string',
            ),
          ),
        ),
        'deletePost' => array(
          'access callback' => TRUE,
          'callback' => 'blogapi_blogger_delete_post',
          'enabled' => 1,
          'help' => 'Deletes a post.',
          'args' => array(
            array(
              'appid' => 'string',
              'postid' => 'string',
              'username' => 'string',
              'password' => 'string',
              'publish' => 'boolean',
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Service callback for blogger.getUsersBlogs
 */
function blogapi_blogger_get_users_blogs($appid, $username, $password) {
  // Validate the user.
  $user = blogapi_validate_user($username, $password);
  if (is_array($user)) {
    // Problem logging in. More specific error is included in $user.
    return services_error($user['message'], $user['error_code']);
  }

  $types = blogapi_get_node_types();
  $structs = array();
  foreach ($types as $type) {
    $structs[] = array('url' => url('user/' . $user->uid, array('absolute' => TRUE)), 'blogid' => $type, 'blogName' => $user->name . ": " . $type);
  }

  return $structs;
}

/**
 * Service callback for blogger.getUserInfo
 */
function blogapi_blogger_get_user_info($appid, $username, $password) {
  // Validate the user.
  $user = blogapi_validate_user($username, $password);
  if (is_array($user)) {
    // Problem logging in. More specific error is included in $user.
    return services_error($user['message'], $user['error_code']);
  }

  $name = explode(' ', $user->realname ? $user->realname : $user->name, 2);
  return array(
    'userid' => $user->uid,
    'lastname' => $name[1],
    'firstname' => $name[0],
    'nickname' => $user->name,
    'email' => $user->mail,
    'url' => url('user/' . $user->uid, array('absolute' => TRUE)),
  );
}

/**
 * Service callback for blogger.newPost
 */
function blogapi_blogger_new_post($appid, $blogid, $username, $password, $content, $publish) {
  // Validate the user.
  $user = blogapi_validate_user($username, $password);
  if (is_array($user)) {
    // Problem logging in. More specific error is included in $user.
    return services_error($user['message'], $user['error_code']);
  }

  if (!node_access('create', $edit['type'])) {
    return services_error(t('You do not have permission to create this type of post.'), 403);
  }

  if (($error = blogapi_validate_content_type($blogid)) !== TRUE) {
    // Return an error if not configured type.
    return services_error($error['message'], $error['error_code']);
  }

  $edit = array();
  $edit['type'] = $blogid;
  // Get the node type defaults.
  $node_type_default = variable_get('node_options_' . $edit['type'], array('status', 'promote'));
  $edit['uid'] = $user->uid;
  $edit['name'] = $user->name;
  $edit['promote'] = in_array('promote', $node_type_default);
  $edit['comment'] = variable_get('comment_' . $edit['type'], 2);
  $edit['revision'] = in_array('revision', $node_type_default);
  $edit['body'][LANGUAGE_NONE][0]['format'] = filter_default_format($user);
  $edit['status'] = $publish;
  $edit['title'] = blogapi_blogger_title($content);
  $edit['body'][LANGUAGE_NONE][0]['value'] = $content;


  if (user_access('administer nodes') && !isset($edit['date'])) {
    $edit['date'] = format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s O');
  }

  module_invoke_all('blogapi_new_post', $edit);

  $valid = blogapi_status_error_check($edit, $publish);
  if ($valid !== TRUE) {
    return services_error($valid['message'], $valid['error_code']);
  }

  node_validate($edit);
  if ($errors = form_get_errors()) {
    return services_error(implode("; ", $errors), 409);
  }

  $node = (object) node_submit($edit);
  node_save($node);
  if ($node->nid) {
    watchdog('content', '@type: added %title using blog API.', array('@type' => $node->type, '%title' => $node->title), WATCHDOG_NOTICE, l(t('view'), "node/$node->nid"));
    // blogger.newPost returns a string so we cast the nid to a string by
    // putting it in double quotes.
    return "$node->nid";
  }

  return services_error(t('Error storing post.'), 500);
}

/**
 * Service callback for blogger.editPost
 */
function blogapi_blogger_edit_post($appid, $blogid, $username, $password, $content, $publish) {
  // Validate the user.
  $user = blogapi_validate_user($username, $password);
  if (is_array($user)) {
    // Problem logging in. More specific error is included in $user.
    return services_error($user['message'], $user['error_code']);
  }

}

/**
 * Service callback for blogger.getPost
 */
function blogapi_blogger_get_post($appid, $postid, $username, $password) {
  // Validate the user.
  $user = blogapi_validate_user($username, $password);
  if (is_array($user)) {
    // Problem logging in. More specific error is included in $user.
    return services_error($user['message'], $user['error_code']);
  }

}

/**
 * Service callback for blogger.deletePost
 */
function blogapi_blogger_delete_post($appid, $postid, $username, $password, $publish) {
  // Validate the user.
  $user = blogapi_validate_user($username, $password);
  if (is_array($user)) {
    // Problem logging in. More specific error is included in $user.
    return services_error($user['message'], $user['error_code']);
  }

}

/**
 * Extract the node title from the contents field.
 */
function blogapi_blogger_extract_title(&$contents) {
  if (preg_match('/<title>(.*?)<\/title>/i', $contents, $title)) {
    $title = strip_tags($title[0]);
    $contents = preg_replace('/<title>.*?<\/title>/i', '', $contents);
  }
  else {
    list($title, $contents) = explode("\n", $contents, 2);
  }

  return $title;
}
