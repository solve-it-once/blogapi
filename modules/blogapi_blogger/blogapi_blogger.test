<?php

/**
 * @file
 * Endpoint tests for BlogAPI Blogger
 */
class BlogapiBloggerEndpointTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';
  protected $unPrivilegedUser;
  protected $privilegedUser;
  protected $privilegedUser2;
  protected $xmlrpcUrl;

  /**
   * Test info.
   */
  public static function getInfo() {
    return array(
      'name' => t('Blogger Endpoint Tests'),
      'description' => t('Run tests for Blogger endpoints') ,
      'group' => t('BlogAPI'),
    );
  }

  /**
   * Set up test.
   */
  public function setUp() {
    parent::setUp(array(
      'blogapi',
      'blogapi_blogger',
      'filter',
      'services',
      'xmlrpc_server',
      'taxonomy',
    ));

    // Get the URL of the XML-RPC endpoint.
    $this->xmlrpcUrl = url('blogapi/xmlrpc', array('absolute' => TRUE));

    // Create a user with appropriate permissions.
    $this->unPrivilegedUser = $this->drupalCreateUser(array('access content'));
    $this->unPrivilegedUser->mail = 'test1@example.com';
    $this->unPrivilegedUser->name = 'Test user 1';
    user_save($this->unPrivilegedUser);

    // Create a user with appropriate permissions.
    $this->privilegedUser = $this->drupalCreateUser(array('manage content with blogapi'));
    $this->privilegedUser->mail = 'test2@example.com';
    $this->privilegedUser->name = 'Test user 2';
    user_save($this->privilegedUser);

    // Create another user with more permissions.
    $this->privilegedUser2 = $this->drupalCreateUser(array('manage content with blogapi', 'bypass node access', 'administer nodes', 'administer taxonomy'));
    $this->privilegedUser2->mail = 'test3@example.com';
    $this->privilegedUser2->name = 'Test user 3';
    user_save($this->privilegedUser2);
  }

  /**
   * Test blogger.getUsersBlogs().
   */
  public function testGetUsersBlogs() {
    // Test authantication with random username/password
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUsersBlogs' => array(
        '1234567890',
        user_password(10),
        user_password(10)
      ),
    ));
    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUsersBlogs' => array(
        '1234567890',
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    // Test blog type retrieval before creating and configuring node types.
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUsersBlogs' => array(
        '1234567890',
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw
      ),
    ));

    $this->assertEqual(count($blog_types), 0, t('No blog types exist and none were returned'));

    // Create a content type and re-test. No types should be returned
    // because the content type is not configured for use with BlogAPI.
    $type = $this->drupalCreateContentType();

    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUsersBlogs' => array(
        '1234567890',
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw
      ),
    ));

    $this->assertEqual(count($blog_types), 0, t('No blog types are configured and none were returned'));

    // Add the new content type to the blog list and make sure that it's
    // returned correctly.
    variable_set('blogapi_node_types', array($type->type));

    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUsersBlogs' => array(
        '1234567890',
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw
      ),
    ));

    $this->assertEqual(count($blog_types), 1, t('One blog type is configured and one was returned'));
    $this->assertEqual($blog_types[0]['blogid'], $type->type, t('The configured blog type is the one that was returned'));
    $this->assertEqual($blog_types[0]['blogName'], $this->privilegedUser->name . ': ' . $type->name, t('The blogName is returned correctly.'));
  }

  /**
   * Test blogger.getUserInfo().
   */
  public function testGetUserInfo() {
    // Test authantication with random username/password
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUserInfo' => array(
        '1234567890',
        user_password(10),
        user_password(10)
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUserInfo' => array(
        '1234567890',
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    $user_info = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getUserInfo' => array(
        '1234567890',
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw
      ),
    ));

    // Get firstname and lastname
    $name = explode(' ', !empty($this->privilegedUser->realname) ? $this->privilegedUser->realname : $this->privilegedUser->name, 2);

    $this->assertEqual($user_info['userid'], $this->privilegedUser->uid, t('Returned data has correct userid'));
    $this->assertEqual($user_info['firstname'], $name[0], t('Returned data has correct username'));
    $this->assertEqual($user_info['lastname'], (!empty($name[1]) ? $name[1] : ''), t('Returned data has correct lastname'));
    $this->assertEqual($user_info['nickname'], $this->privilegedUser->name, t('Returned data has correct nickname'));
    $this->assertEqual($user_info['email'], $this->privilegedUser->mail, t('Returned data has correct email.'));
    $this->assertEqual($user_info['url'], url('user/' . $this->privilegedUser->uid, array('absolute' => TRUE)), t('Returned data has correct URL'));
  }

  /**
   * Test blogger.newPost()
   */
  public function testNewPost() {
    // Prepare data for nodes
    $node_title = user_password(10);
    $node_body = user_password(20);
    $content = '<title>' . $node_title . '</title>' . $node_body;
    $missed_type = '_arcticle';

    // Test authantication with random username/password
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.newPost' => array(
        '1234567890',
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Test authantication with random username/password
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.newPost' => array(
        '1234567890',
        $missed_type,
        user_password(10),
        user_password(10),
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.newPost' => array(
        '1234567890',
        $missed_type,
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw,
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    // Try to create the node. This should fail because the user does not have
    // permission to create this content type.
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'blogger.newPost' => array(
        '1234567890',
        $missed_type,
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw,
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), 'You do not have permission to create this type of post.',
      t('Node access is being respected.'));


    // Try to create the node. This should fail because the user does not have
    // permission to create this content type.
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'blogger.newPost' => array(
        '1234567890',
        $missed_type,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('BlogAPI is not configured to support the @type content type.', array('@type' => $missed_type)),
      $missed_type . ' type is missed.');

    // Create a content type.
    $type = $this->drupalCreateContentType();
    // Test with existing content type but not allowed for BlogAPI
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'blogger.newPost' => array(
        '1234567890',
        $type->type,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('BlogAPI is not configured to support the @type content type.', array('@type' => $type->type)),
      $type->type . ' is not allowed for BlogAPI yet.');

    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($type->type));
    // Create the node. This should work because the user has administer nodes.
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'blogger.newPost' => array(
        '1234567890',
        $type->type,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        $content,
        TRUE,
      ),
    ));

    // Load the node and validate the data.
    $node = node_load($nid[0]);
    $this->assertEqual($node->title, $node_title, t('New node title is set correctly.'));
    $this->assertEqual($node->body[LANGUAGE_NONE][0]['value'], $node_body, t('New node body is set correctly.'));
    $this->assertEqual($node->status, 1, t('New node is published'));
  }

  /**
   * Test blogger.editPost().
   */
  public function testEditPost() {
    // Test authantication with random username/password
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.editPost' => array(
        '1234567890',
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Prepare data for nodes
    $node_title = user_password(10);
    $node_body = user_password(20);
    $content = '<title>' . $node_title . '</title>' . $node_body;
    $allowed_type = $this->drupalCreateContentType();
    $disallowed_type = $this->drupalCreateContentType();

    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($allowed_type->type));

    $wrong_node = $this->drupalCreateNode(array('type' => $disallowed_type->type));
    $correct_node = $this->drupalCreateNode(array('type' => $allowed_type->type, 'title' => $node_title, 'body' => array(LANGUAGE_NONE => array(array('value' => $node_body)))));

    // Test authantication with random username/password
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.editPost' => array(
        '1234567890',
        $correct_node->nid,
        user_password(10),
        user_password(10),
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));


    // Test user without blogAPI permission.
    $blog_types = xmlrpc($this->xmlrpcUrl, array(
      'blogger.editPost' => array(
        '1234567890',
        $correct_node->nid,
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw,
        $content,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    // Test edit unexisting node
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'blogger.editPost' => array(
        '1234567890',
        0,
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw,
        $content,
        TRUE,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Node @nid not found', array('@nid' => 0)), t('Not found error returned'));// Test edit unexisting node

    // Try to update node with unprevileged user
    $nid = xmlrpc($this->xmlrpcUrl, array(
      'blogger.editPost' => array(
        '1234567890',
        $correct_node->nid,
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw,
        $content,
        TRUE,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to update this post.'), t('User must have node edit permissions'));

    $node_title .= ' modified title';
    $node_body .= ' modified body';

    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.editPost' => array(
        '1234567890',
        $correct_node->nid,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        '<title>' . $node_title . '</title>' . $node_body,
        TRUE
      )
    ));

    $new_node = node_load($correct_node->nid, NULL, TRUE);
    $this->assertTrue($result && $new_node->title != $correct_node->title, 'Node was updated');

    $this->assertTrue($new_node->title == $node_title, 'Title was updated');

    $this->assertTrue(!empty($new_node->body[LANGUAGE_NONE][0]['value']) && $new_node->body[LANGUAGE_NONE][0]['value'] == $node_body, 'Body was updated');
  }

  /**
   * Test blogger.getPost().
   */
  public function testGetPost() {
    $type = $this->drupalCreateContentType();

    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($type->type));

    $node = $this->drupalCreateNode(array('type' => $type->type, 'uid' => $this->privilegedUser2->uid));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getPost' => array(
        '1234567890',
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getPost' => array(
        '1234567890',
        $node->nid,
        user_password(10),
        user_password(10),
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getPost' => array(
        '1234567890',
        $node->nid,
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    // Test user without node view permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getPost' => array(
        '1234567890',
        $node->nid,
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You are not authorized to view post @postid', array('@postid' => $node->nid)), t('User must node view permissions'));

    // Normal test
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getPost' => array(
        '1234567890',
        $node->nid,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
      ),
    ));

    $this->assertTrue($result['userid'] == $this->privilegedUser2->name, 'Author name is correct');
    $this->assertTrue($result['dateCreated'] == xmlrpc_date($node->created), 'Created date is correct');
    $this->assertTrue($result['title'] == $node->title, 'Post title is correct');
    $this->assertTrue($result['postid'] == $node->nid, 'Post ID is correct');
    $node_body = !empty($node->body[LANGUAGE_NONE][0]['value']) ? $node->body[LANGUAGE_NONE][0]['value'] : '';
    $this->assertTrue($result['content'] == '<title>' . $node->title . '</title>' . $node_body, 'Post content is correct');
    $this->assertTrue($result['link'] == url('node/' . $node->nid, array('absolute' => TRUE)), 'Post link is correct');
  }

  /**
   * Test blogger.deletePost().
   */
  public function testDeletePost() {
    $type = $this->drupalCreateContentType();

    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($type->type));

    $node = $this->drupalCreateNode(array('type' => $type->type, 'uid' => $this->privilegedUser2->uid));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.deletePost' => array(
        '1234567890',
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.deletePost' => array(
        '1234567890',
        $node->nid,
        user_password(10),
        user_password(10),
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.deletePost' => array(
        '1234567890',
        $node->nid,
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw,
        TRUE
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    // Test user without blogAPI permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.deletePost' => array(
        '1234567890',
        $node->nid,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        TRUE
      ),
    ));

    $deleted_node = node_load($node->nid, NULL, TRUE);

    $this->assertTrue($result && !$deleted_node, 'Node was deleted');
  }

  /**
   * Test blogger.getRecentPosts().
   */
  public function testGetRecentPosts() {
    $type = $this->drupalCreateContentType();
    $number_of_posts = 9;
    $nodes = array();

    for ($i = 0; $i < 11; $i++) {
      $nodes[] = $this->drupalCreateNode(array('type' => $type->type, 'uid' => $this->privilegedUser2->uid));
    }

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getRecentPosts' => array(
        '1234567890',
      ),
    ));

    $this->assertTrue(strpos(xmlrpc_error_msg(), t('Missing required argument')) !== FALSE, t('Needs corect arguments'));

    // Test authantication with random username/password
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getRecentPosts' => array(
        '1234567890',
        $type->type,
        user_password(10),
        user_password(10),
        $number_of_posts,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('Invalid username or password'), t('Access only for logged in users'));

    // Test user without blogAPI permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getRecentPosts' => array(
        '1234567890',
        $type->type,
        $this->unPrivilegedUser->name,
        $this->unPrivilegedUser->pass_raw,
        $number_of_posts,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('You do not have permission to edit this blog'), t('User must have blogAPI permissions'));

    // Test user without node view permission.
    $result = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getRecentPosts' => array(
        '1234567890',
        $type->type,
        $this->privilegedUser->name,
        $this->privilegedUser->pass_raw,
        $number_of_posts,
      ),
    ));

    $this->assertEqual(xmlrpc_error_msg(), t('BlogAPI is not configured to support the @type content type.', array('@type' => $type->type)),
      $type->type . ' is not allowed for BlogAPI yet.');

    // Allow to user our content type with BlogAPI
    variable_set('blogapi_node_types', array($type->type));

    // Test user without node view permission.
    $results = xmlrpc($this->xmlrpcUrl, array(
      'blogger.getRecentPosts' => array(
        '1234567890',
        $type->type,
        $this->privilegedUser2->name,
        $this->privilegedUser2->pass_raw,
        $number_of_posts,
      ),
    ));
    
    $this->assertTrue(is_array($results) && count($results) == $number_of_posts, 'Service returned correct posts number');
    $success = TRUE;

    foreach ($results as $post) {
      $node = node_load($post['postid']);

      if (empty($node) || $node->title != $post['title']
        || (!empty($node->body[LANGUAGE_NONE][0]['value']) && $node->body[LANGUAGE_NONE][0]['value'] != $post['description'])) {
        $success = FALSE;
      }
    }

    $this->assertTrue($success, 'All nodes were retrieved properly');
  }
}
